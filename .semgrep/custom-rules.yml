{"rules":[{"id":"ruby.lang.security.no-send.bad-send","languages":["ruby"],"message":"Checks for unsafe use of Object#send, try, __send__, and public_send. These only account for unsafe\nuse of a method, not target. This can lead to arbitrary calling of exit, along with arbitrary code     execution.\nPlease be sure to sanitize input in order to avoid this.\n","metadata":{"category":"security","dev.semgrep.actions":[],"license":"Commons Clause License Condition v1.0[LGPL-2.1-only]","references":["https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_send.rb","https://the.igreque.info/posts/2016/01-object-send-considered-harmful-en.html"],"semgrep.policy":{"id":11067,"name":"rails","slug":"rails"},"semgrep.ruleset":"ruby","semgrep.url":"https://semgrep.dev/r/ruby.lang.security.no-send.bad-send","source":"https://semgrep.dev/r/ruby.lang.security.no-send.bad-send"},"pattern-either":[{"pattern":"$PARAM = params[...]\n...\n$RES = $MOD.send($PARAM.$FUNC)\n"},{"pattern":"$PARAM = params[...]\n...\n$RES = $MOD.try($PARAM.$FUNC)\n"},{"pattern":"$PARAM = params[...]\n...\n$RES = $MOD.__send__($PARAM.$FUNC)\n"},{"pattern":"$PARAM = params[...]\n...\n$RES = $MOD.public_send($PARAM.$FUNC)\n"}],"severity":"ERROR"},{"fix-regex":{"regex":"VERIFY_NONE","replacement":"VERIFY_PEER"},"id":"ruby.lang.security.ssl-mode-no-verify.ssl-mode-no-verify","languages":["ruby"],"message":"Detected SSL that will accept an unverified connection.\nThis makes the connections susceptible to man-in-the-middle attacks.\nUse 'OpenSSL::SSL::VERIFY_PEER' intead.\n","metadata":{"category":"security","dev.semgrep.actions":[],"license":"Commons Clause License Condition v1.0[LGPL-2.1-only]","semgrep.policy":{"id":11067,"name":"rails","slug":"rails"},"semgrep.ruleset":"ruby","semgrep.url":"https://semgrep.dev/r/ruby.lang.security.ssl-mode-no-verify.ssl-mode-no-verify","source":"https://semgrep.dev/r/ruby.lang.security.ssl-mode-no-verify.ssl-mode-no-verify"},"pattern":"OpenSSL::SSL::VERIFY_NONE","severity":"WARNING"},{"id":"ruby.lang.security.force-ssl-false.force-ssl-false","languages":["ruby"],"message":"Checks for configuration setting of force_ssl to false. Force_ssl forces usage of HTTPS, which\ncould lead to network interception of unencrypted application traffic. To fix, set config.force_ssl = true.\n","metadata":{"category":"security","dev.semgrep.actions":[],"license":"Commons Clause License Condition v1.0[LGPL-2.1-only]","references":["https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_force_ssl.rb"],"semgrep.policy":{"id":11067,"name":"rails","slug":"rails"},"semgrep.ruleset":"ruby","semgrep.url":"https://semgrep.dev/r/ruby.lang.security.force-ssl-false.force-ssl-false","source":"https://semgrep.dev/r/ruby.lang.security.force-ssl-false.force-ssl-false"},"pattern":"config.force_ssl = false","severity":"WARNING"},{"id":"ruby.lang.security.timing-attack.timing-attack","languages":["ruby"],"message":"Checks for unsafe use of method http_basic_authenticate_with, which is vulnerable to timing attacks as it\ndoes not use constant-time checking when comparing passwords. Affected Rails versions include:\n5.0.0.beta1.1, 4.2.5.1, 4.1.14.1, 3.2.22.1. Avoid this function if possible.\n","metadata":{"category":"security","dev.semgrep.actions":[],"license":"Commons Clause License Condition v1.0[LGPL-2.1-only]","references":["https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_basic_auth_timing_attack.rb","https://groups.google.com/g/rubyonrails-security/c/ANv0HDHEC3k/m/mt7wNGxbFQAJ"],"semgrep.policy":{"id":11067,"name":"rails","slug":"rails"},"semgrep.ruleset":"ruby","semgrep.url":"https://semgrep.dev/r/ruby.lang.security.timing-attack.timing-attack","source":"https://semgrep.dev/r/ruby.lang.security.timing-attack.timing-attack"},"pattern":"http_basic_authenticate_with ...","severity":"ERROR"},{"id":"ruby.lang.security.bad-deserialization.bad-deserialization","languages":["ruby"],"message":"Checks for unsafe deserialization. Objects in Ruby can be serialized into strings,\nthen later loaded from strings. However, uses of load and object_load can cause remote code execution.\nLoading user input with YAML, MARSHAL, or CSV can potentially be dangerous. Use JSON securely instead.\n","metadata":{"category":"security","dev.semgrep.actions":[],"license":"Commons Clause License Condition v1.0[LGPL-2.1-only]","references":["https://groups.google.com/g/rubyonrails-security/c/61bkgvnSGTQ/m/nehwjA8tQ8EJ","https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_deserialize.rb"],"semgrep.policy":{"id":11067,"name":"rails","slug":"rails"},"semgrep.ruleset":"ruby","semgrep.url":"https://semgrep.dev/r/ruby.lang.security.bad-deserialization.bad-deserialization","source":"https://semgrep.dev/r/ruby.lang.security.bad-deserialization.bad-deserialization"},"patterns":[{"pattern-either":[{"pattern":"YAML.load(...)\n"},{"pattern":"CSV.load(...)\n"},{"pattern":"Marshal.load(...)\n"},{"pattern":"Marshal.restore(...)\n"},{"pattern":"$OBJ.object_load(...)\n"}]},{"pattern-not":"YAML.load(..., safe: true, ...)\n"}],"severity":"ERROR"},{"id":"ruby.lang.security.no-eval.ruby-eval","languages":["ruby"],"message":"Use of eval detected. This can run arbitrary code. Ensure external data\ndoes not reach here, otherwise this is a security vulnerability.\nConsider other ways to do this without eval.\n","metadata":{"category":"security","dev.semgrep.actions":[],"license":"Commons Clause License Condition v1.0[LGPL-2.1-only]","semgrep.policy":{"id":11067,"name":"rails","slug":"rails"},"semgrep.ruleset":"ruby","semgrep.url":"https://semgrep.dev/r/ruby.lang.security.no-eval.ruby-eval","source":"https://semgrep.dev/r/ruby.lang.security.no-eval.ruby-eval"},"pattern-either":[{"pattern":"eval(...)"},{"pattern":"$BIND.eval(...)"},{"pattern":"$CLASS.class_eval do\n  ...\nend\n"},{"pattern":"$CLASS.instance_eval do\n  ...\nend\n"},{"pattern":"$CLASS.module_eval do\n  ...\nend\n"},{"pattern":"$CLASS.class_eval(...)\n"},{"pattern":"$CLASS.instance_eval(...)\n"},{"pattern":"$CLASS.module_eval(...)\n"},{"pattern":"$VM.compile(...).eval\n"},{"patterns":[{"pattern":"$IS.eval\n"},{"pattern-inside":"$IS = $VM.compile(...)\n...\n"}]}],"severity":"WARNING"},{"id":"ruby.lang.security.file-disclosure.file-disclosure","languages":["ruby"],"message":"Special requests can determine whether a file exists on a filesystem that's outside the Ruby app's\nroot directory. To fix this, set config.serve_static_assets = false.\n","metadata":{"category":"security","dev.semgrep.actions":[],"license":"Commons Clause License Condition v1.0[LGPL-2.1-only]","references":["https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_file_disclosure.rb","https://groups.google.com/g/rubyonrails-security/c/23fiuwb1NBA/m/MQVM1-5GkPMJ"],"semgrep.policy":{"id":11067,"name":"rails","slug":"rails"},"semgrep.ruleset":"ruby","semgrep.url":"https://semgrep.dev/r/ruby.lang.security.file-disclosure.file-disclosure","source":"https://semgrep.dev/r/ruby.lang.security.file-disclosure.file-disclosure"},"pattern":"config.serve_static_assets = true","severity":"ERROR"},{"id":"ruby.lang.security.hardcoded-http-auth-in-controller.hardcoded-http-auth-in-controller","languages":["ruby"],"message":"Detected hardcoded password used in basic authentication in a controller\nclass. Including this password in version control could expose this\ncredential. Consider refactoring to use environment variables or\nconfiguration files.\n","metadata":{"category":"security","cwe":"CWE-798: Use of Hard-coded Credentials","dev.semgrep.actions":[],"license":"Commons Clause License Condition v1.0[LGPL-2.1-only]","owasp":"A3: Sensitive Data Exposure","semgrep.policy":{"id":11067,"name":"rails","slug":"rails"},"semgrep.ruleset":"ruby","semgrep.url":"https://semgrep.dev/r/ruby.lang.security.hardcoded-http-auth-in-controller.hardcoded-http-auth-in-controller","source":"https://semgrep.dev/r/ruby.lang.security.hardcoded-http-auth-in-controller.hardcoded-http-auth-in-controller","source-rule-url":"https://github.com/presidentbeef/brakeman/blob/main/docs/warning_types/basic_auth/index.markdown"},"pattern":"class $CONTROLLER < ApplicationController\n  ...\n  http_basic_authenticate_with ..., :password => \"...\", ...\nend\n","severity":"ERROR"},{"id":"ruby.lang.security.filter-skipping.filter-skipping","languages":["ruby"],"message":"Checks for use of action in Ruby routes. This can cause Rails to render an arbitrary view if an\nattacker creates an URL accurately. Affects 3.0 applications. Can avoid the vulnerability by providing\nadditional constraints.\n","metadata":{"category":"security","dev.semgrep.actions":[],"license":"Commons Clause License Condition v1.0[LGPL-2.1-only]","references":["https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_filter_skipping.rb","https://groups.google.com/g/rubyonrails-security/c/NCCsca7TEtY"],"semgrep.policy":{"id":11067,"name":"rails","slug":"rails"},"semgrep.ruleset":"ruby","semgrep.url":"https://semgrep.dev/r/ruby.lang.security.filter-skipping.filter-skipping","source":"https://semgrep.dev/r/ruby.lang.security.filter-skipping.filter-skipping"},"patterns":[{"pattern-not":"$CALL \"=~/.*(/:action.*).*/\", $ACTION\n"},{"pattern":"$CALL \"=~/.*(/:action.*).*/\"\n"}],"severity":"ERROR"},{"id":"ruby.lang.security.cookie-serialization.cookie-serialization","languages":["ruby"],"message":"Checks if code allows cookies to be deserialized using Marshal. If the attacker can craft a valid cookie, this could lead to\nremote code execution. The hybrid check is just to warn users to migrate to :json for best practice.\n","metadata":{"category":"security","dev.semgrep.actions":[],"license":"Commons Clause License Condition v1.0[LGPL-2.1-only]","references":["https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_cookie_serialization.rb","https://robertheaton.com/2013/07/22/how-to-hack-a-rails-app-using-its-secret-token/"],"semgrep.policy":{"id":11067,"name":"rails","slug":"rails"},"semgrep.ruleset":"ruby","semgrep.url":"https://semgrep.dev/r/ruby.lang.security.cookie-serialization.cookie-serialization","source":"https://semgrep.dev/r/ruby.lang.security.cookie-serialization.cookie-serialization"},"pattern-either":[{"pattern":"Rails.application.config.action_dispatch.cookies_serializer = :marshal\n"},{"pattern":"Rails.application.config.action_dispatch.cookies_serializer = :hybrid\n"}],"severity":"ERROR"},{"id":"ruby.lang.security.missing-csrf-protection.missing-csrf-protection","languages":["ruby"],"message":"Detected controller which does not enable cross-site request forgery\nprotections using 'protect_from_forgery'. Add\n'protect_from_forgery :with => :exception' to your controller class.\n","metadata":{"category":"security","cwe":"CWE-352: Cross-Site Request Forgery (CSRF)","dev.semgrep.actions":[],"license":"Commons Clause License Condition v1.0[LGPL-2.1-only]","owasp":"A6: Security Misconfiguration","semgrep.policy":{"id":11067,"name":"rails","slug":"rails"},"semgrep.ruleset":"ruby","semgrep.url":"https://semgrep.dev/r/ruby.lang.security.missing-csrf-protection.missing-csrf-protection","source":"https://semgrep.dev/r/ruby.lang.security.missing-csrf-protection.missing-csrf-protection","source-rule-url":"https://github.com/presidentbeef/brakeman/blob/main/docs/warning_types/cross-site_request_forgery/index.markdown"},"patterns":[{"pattern":"class $CONTROLLER < ActionController::Base\n  ...\nend\n"},{"pattern-not":"class $CONTROLLER < ActionController::Base\n  ...\n  protect_from_forgery :with => :exception\nend\n"},{"pattern-not":"class $CONTROLLER < ActionController::Base\n  ...\n  protect_from_forgery prepend: true, with: :exception\nend\n"}],"severity":"ERROR"},{"id":"ruby.lang.security.mass-assignment-protection-disabled.mass-assignment-protection-disabled","languages":["ruby"],"message":"Mass assignment protection disabled for '$MODEL'. This could\npermit assignment to sensitive model fields without intention. Instead,\nuse 'attr_accessible' for the model or disable mass assigment using\n'config.active_record.whitelist_attributes = true'.\n':without_protection => true' must be removed for this to take effect.\n","metadata":{"category":"security","cwe":"CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes","dev.semgrep.actions":[],"license":"Commons Clause License Condition v1.0[LGPL-2.1-only]","owasp":"A1: Injection","semgrep.policy":{"id":11067,"name":"rails","slug":"rails"},"semgrep.ruleset":"ruby","semgrep.url":"https://semgrep.dev/r/ruby.lang.security.mass-assignment-protection-disabled.mass-assignment-protection-disabled","source":"https://semgrep.dev/r/ruby.lang.security.mass-assignment-protection-disabled.mass-assignment-protection-disabled","source-rule-url":"https://github.com/presidentbeef/brakeman/blob/main/docs/warning_types/mass_assignment/index.markdown"},"pattern":"$MODEL.new(params[...], ..., :without_protection => true, ...)","severity":"WARNING"},{"id":"ruby.lang.security.create-with.create-with","languages":["ruby"],"message":"Checks for strong parameter bypass through usage of create_with. Create_with bypasses strong parameter protection, which\ncould allow attackers to set arbitrary attributes on models. To fix this vulnerability, either remove all create_with calls\nor use the permit function to specify tags that are allowed to be set.\n","metadata":{"category":"security","dev.semgrep.actions":[],"license":"Commons Clause License Condition v1.0[LGPL-2.1-only]","references":["https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_create_with.rb","https://groups.google.com/g/rubyonrails-security/c/M4chq5Sb540/m/CC1Fh0Y_NWwJ"],"semgrep.policy":{"id":11067,"name":"rails","slug":"rails"},"semgrep.ruleset":"ruby","semgrep.url":"https://semgrep.dev/r/ruby.lang.security.create-with.create-with","source":"https://semgrep.dev/r/ruby.lang.security.create-with.create-with"},"patterns":[{"pattern-not":"$FUNC.create_with($PARAMSB.permit(...))\n"},{"pattern":"$FUNC.create_with($PARAMSA)\n"}],"severity":"ERROR"},{"id":"ruby.lang.security.weak-hashes-md5.weak-hashes-md5","languages":["ruby"],"message":"Hey! You REALLY should not use md5 to generate hashes. md5 is proven to be vulnerable through the use of brute-force attacks.\nCould also result in collisions,leading to potential collision attacks. Use SHA256 or other hashing functions instead.\n","metadata":{"category":"security","dev.semgrep.actions":[],"license":"Commons Clause License Condition v1.0[LGPL-2.1-only]","references":["https://davidscrobonia.com"],"semgrep.policy":{"id":11067,"name":"rails","slug":"rails"},"semgrep.ruleset":"ruby","semgrep.url":"https://semgrep.dev/r/ruby.lang.security.weak-hashes-md5.weak-hashes-md5","source":"https://semgrep.dev/r/ruby.lang.security.weak-hashes-md5.weak-hashes-md5"},"pattern-either":[{"pattern":"Digest::MD5.base64digest $X"},{"pattern":"Digest::MD5.hexdigest $X"},{"pattern":"Digest::MD5.digest $X"},{"pattern":"Digest::MD5.new"},{"pattern":"OpenSSL::Digest::MD5.base64digest $X"},{"pattern":"OpenSSL::Digest::MD5.hexdigest $X"},{"pattern":"OpenSSL::Digest::MD5.digest $X"},{"pattern":"OpenSSL::Digest::MD5.new"}],"severity":"WARNING"},{"id":"ruby.lang.security.divide-by-zero.divide-by-zero","languages":["ruby"],"message":"Checks for divide by zero. Best practice involves not dividing a variable by zero, as this leads to a Ruby\nZeroDivisionError.\n","metadata":{"category":"security","dev.semgrep.actions":[],"license":"Commons Clause License Condition v1.0[LGPL-2.1-only]","references":["https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_divide_by_zero.rb"],"semgrep.policy":{"id":11067,"name":"rails","slug":"rails"},"semgrep.ruleset":"ruby","semgrep.url":"https://semgrep.dev/r/ruby.lang.security.divide-by-zero.divide-by-zero","source":"https://semgrep.dev/r/ruby.lang.security.divide-by-zero.divide-by-zero"},"pattern-either":[{"pattern":"$X / 0\n"},{"pattern":"$ZERO = 0\n...\n$X / $ZERO\n"}],"severity":"WARNING"},{"id":"ruby.lang.security.unprotected-mass-assign.mass-assignment-vuln","languages":["ruby"],"message":"Checks for calls to without_protection during mass assignment (which allows record creation from hash values).\nThis can lead to users bypassing permissions protections. For Rails 4 and higher, mass protection is on by default.\nFix: Don't use :without_protection => true. Instead, configure attr_acessible to control attribute access.\n","metadata":{"category":"security","cwe":"CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes","dev.semgrep.actions":[],"license":"Commons Clause License Condition v1.0[LGPL-2.1-only]","owasp":"A1: Injection","references":["https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_without_protection.rb","https://www.acunetix.com/vulnerabilities/web/rails-mass-assignment/"],"semgrep.policy":{"id":11067,"name":"rails","slug":"rails"},"semgrep.ruleset":"ruby","semgrep.url":"https://semgrep.dev/r/ruby.lang.security.unprotected-mass-assign.mass-assignment-vuln","source":"https://semgrep.dev/r/ruby.lang.security.unprotected-mass-assign.mass-assignment-vuln"},"patterns":[{"pattern-either":[{"pattern":"$MOD.new(params[$CODE])\n"},{"pattern":"$MOD.new(..., params[$CODE], :without_protection => true, ...)\n"}]},{"pattern-not-inside":"attr_accessible $VAR\n...\n$MOD.new(params[$CODE])\n"}],"severity":"WARNING"}]}
